"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _ClientListResponse = _interopRequireDefault(require("../sunshine-conversations-client.model/ClientListResponse"));
var _DeviceResponse = _interopRequireDefault(require("../sunshine-conversations-client.model/DeviceResponse"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Sunshine Conversations API
 *
 * The version of the OpenAPI document: 12.5.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.3.1
 *
 * Do not edit the class manually.
 *
 */
/**
* Devices service.
* @module sunshine-conversations-client/sunshine-conversations-client.api/DevicesApi
* @version 12.5.0
*/
var DevicesApi = exports["default"] = /*#__PURE__*/function () {
  /**
  * Constructs a new DevicesApi. 
  * @alias module:sunshine-conversations-client/sunshine-conversations-client.api/DevicesApi
  * @class
  * @param {module:sunshine-conversations-client/ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:sunshine-conversations-client/ApiClient#instance} if unspecified.
  */
  function DevicesApi(apiClient) {
    _classCallCheck(this, DevicesApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }

  /**
   * Get Device
   * Fetches a specific Device.  ```shell /v2/apps/:appId/users/:userId ``` 
   * @param {String} appId Identifies the app.
   * @param {String} userIdOrExternalId The user's id or externalId.
   * @param {String} deviceId The device's id.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/DeviceResponse} and HTTP response
   */
  return _createClass(DevicesApi, [{
    key: "getDeviceWithHttpInfo",
    value: function getDeviceWithHttpInfo(appId, userIdOrExternalId, deviceId) {
      var postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getDevice");
      }
      // verify the required parameter 'userIdOrExternalId' is set
      if (userIdOrExternalId === undefined || userIdOrExternalId === null) {
        throw new Error("Missing the required parameter 'userIdOrExternalId' when calling getDevice");
      }
      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling getDevice");
      }
      var pathParams = {
        'appId': appId,
        'userIdOrExternalId': userIdOrExternalId,
        'deviceId': deviceId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['basicAuth', 'bearerAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _DeviceResponse["default"];
      return this.apiClient.callApi('/v2/apps/{appId}/users/{userIdOrExternalId}/devices/{deviceId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * Get Device
     * Fetches a specific Device.  ```shell /v2/apps/:appId/users/:userId ``` 
     * @param {String} appId Identifies the app.
     * @param {String} userIdOrExternalId The user's id or externalId.
     * @param {String} deviceId The device's id.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/DeviceResponse}
     */
  }, {
    key: "getDevice",
    value: function getDevice(appId, userIdOrExternalId, deviceId) {
      return this.getDeviceWithHttpInfo(appId, userIdOrExternalId, deviceId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }

    /**
     * List Devices
     * Get all the devices for a particular user. The Devices are sorted based on last seen time.  ```shell /v2/apps/:appId/users/:userId/devices ``` 
     * @param {String} appId Identifies the app.
     * @param {String} userIdOrExternalId The user's id or externalId.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/ClientListResponse} and HTTP response
     */
  }, {
    key: "listDevicesWithHttpInfo",
    value: function listDevicesWithHttpInfo(appId, userIdOrExternalId) {
      var postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling listDevices");
      }
      // verify the required parameter 'userIdOrExternalId' is set
      if (userIdOrExternalId === undefined || userIdOrExternalId === null) {
        throw new Error("Missing the required parameter 'userIdOrExternalId' when calling listDevices");
      }
      var pathParams = {
        'appId': appId,
        'userIdOrExternalId': userIdOrExternalId
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var authNames = ['basicAuth', 'bearerAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _ClientListResponse["default"];
      return this.apiClient.callApi('/v2/apps/{appId}/users/{userIdOrExternalId}/devices', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }

    /**
     * List Devices
     * Get all the devices for a particular user. The Devices are sorted based on last seen time.  ```shell /v2/apps/:appId/users/:userId/devices ``` 
     * @param {String} appId Identifies the app.
     * @param {String} userIdOrExternalId The user's id or externalId.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:sunshine-conversations-client/sunshine-conversations-client.model/ClientListResponse}
     */
  }, {
    key: "listDevices",
    value: function listDevices(appId, userIdOrExternalId) {
      return this.listDevicesWithHttpInfo(appId, userIdOrExternalId).then(function (response_and_data) {
        return response_and_data.data;
      });
    }
  }]);
}();