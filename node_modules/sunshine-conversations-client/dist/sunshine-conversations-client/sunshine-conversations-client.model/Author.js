"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Sunshine Conversations API
 *
 * The version of the OpenAPI document: 12.5.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.3.1
 *
 * Do not edit the class manually.
 *
 */
/**
 * The Author model module.
 * @module sunshine-conversations-client/sunshine-conversations-client.model/Author
 * @version 12.5.0
 */
var Author = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>Author</code>.
   * The author of the message.
   * @alias module:sunshine-conversations-client/sunshine-conversations-client.model/Author
   * @param type {module:sunshine-conversations-client/sunshine-conversations-client.model/Author.TypeEnum} The author type. Either \"user\" (representing the end user)  or \"business\" (sent on behalf of the business). 
   */
  function Author(type) {
    _classCallCheck(this, Author);
    Author.initialize(this, type);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  return _createClass(Author, [{
    key: "getType",
    value:
    /**
         * Returns The author type. Either \"user\" (representing the end user)  or \"business\" (sent on behalf of the business). 
         * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/Author.TypeEnum}
         */
    function getType() {
      return this.type;
    }

    /**
     * Sets The author type. Either \"user\" (representing the end user)  or \"business\" (sent on behalf of the business). 
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/Author.TypeEnum} type The author type. Either \"user\" (representing the end user)  or \"business\" (sent on behalf of the business). 
     */
  }, {
    key: "setType",
    value: function setType(type) {
      this['type'] = type;
    }
    /**
         * Returns A string array that indicates the author's subtypes. Messages from \"business\" type with an \"AI\" subtype  are generated by AI and a disclaimer is appended to the text of the message sent to the customer.  For third-party channels, the disclaimer is applied for image, file, and text message types. 
         * @return {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/Author.SubtypesEnum>}
         */
  }, {
    key: "getSubtypes",
    value: function getSubtypes() {
      return this.subtypes;
    }

    /**
     * Sets A string array that indicates the author's subtypes. Messages from \"business\" type with an \"AI\" subtype  are generated by AI and a disclaimer is appended to the text of the message sent to the customer.  For third-party channels, the disclaimer is applied for image, file, and text message types. 
     * @param {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/Author.SubtypesEnum>} subtypes A string array that indicates the author's subtypes. Messages from \"business\" type with an \"AI\" subtype  are generated by AI and a disclaimer is appended to the text of the message sent to the customer.  For third-party channels, the disclaimer is applied for image, file, and text message types. 
     */
  }, {
    key: "setSubtypes",
    value: function setSubtypes(subtypes) {
      this['subtypes'] = subtypes;
    }
    /**
         * Returns The id of the user. Only supported when `type` is user.
         * @return {String}
         */
  }, {
    key: "getUserId",
    value: function getUserId() {
      return this.userId;
    }

    /**
     * Sets The id of the user. Only supported when `type` is user.
     * @param {String} userId The id of the user. Only supported when `type` is user.
     */
  }, {
    key: "setUserId",
    value: function setUserId(userId) {
      this['userId'] = userId;
    }
    /**
         * Returns The externalId of the user. Only supported when `type` is user.
         * @return {String}
         */
  }, {
    key: "getUserExternalId",
    value: function getUserExternalId() {
      return this.userExternalId;
    }

    /**
     * Sets The externalId of the user. Only supported when `type` is user.
     * @param {String} userExternalId The externalId of the user. Only supported when `type` is user.
     */
  }, {
    key: "setUserExternalId",
    value: function setUserExternalId(userExternalId) {
      this['userExternalId'] = userExternalId;
    }
    /**
         * Returns The display name of the message author.
         * @return {String}
         */
  }, {
    key: "getDisplayName",
    value: function getDisplayName() {
      return this.displayName;
    }

    /**
     * Sets The display name of the message author.
     * @param {String} displayName The display name of the message author.
     */
  }, {
    key: "setDisplayName",
    value: function setDisplayName(displayName) {
      this['displayName'] = displayName;
    }
    /**
         * Returns A custom message icon URL. The image must be JPG, PNG, or GIF format.
         * @return {String}
         */
  }, {
    key: "getAvatarUrl",
    value: function getAvatarUrl() {
      return this.avatarUrl;
    }

    /**
     * Sets A custom message icon URL. The image must be JPG, PNG, or GIF format.
     * @param {String} avatarUrl A custom message icon URL. The image must be JPG, PNG, or GIF format.
     */
  }, {
    key: "setAvatarUrl",
    value: function setAvatarUrl(avatarUrl) {
      this['avatarUrl'] = avatarUrl;
    }
  }], [{
    key: "initialize",
    value: function initialize(obj, type) {
      obj['type'] = type;
    }

    /**
     * Constructs a <code>Author</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/Author} obj Optional instance to populate.
     * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/Author} The populated <code>Author</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new Author();
        if (data.hasOwnProperty('type')) {
          obj['type'] = _ApiClient["default"].convertToType(data['type'], 'String');
        }
        if (data.hasOwnProperty('subtypes')) {
          obj['subtypes'] = _ApiClient["default"].convertToType(data['subtypes'], ['String']);
        }
        if (data.hasOwnProperty('userId')) {
          obj['userId'] = _ApiClient["default"].convertToType(data['userId'], 'String');
        }
        if (data.hasOwnProperty('userExternalId')) {
          obj['userExternalId'] = _ApiClient["default"].convertToType(data['userExternalId'], 'String');
        }
        if (data.hasOwnProperty('displayName')) {
          obj['displayName'] = _ApiClient["default"].convertToType(data['displayName'], 'String');
        }
        if (data.hasOwnProperty('avatarUrl')) {
          obj['avatarUrl'] = _ApiClient["default"].convertToType(data['avatarUrl'], 'String');
        }
      }
      return obj;
    }
  }]);
}();
/**
 * The author type. Either \"user\" (representing the end user)  or \"business\" (sent on behalf of the business). 
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/Author.TypeEnum} type
 */
Author.prototype['type'] = undefined;

/**
 * A string array that indicates the author's subtypes. Messages from \"business\" type with an \"AI\" subtype  are generated by AI and a disclaimer is appended to the text of the message sent to the customer.  For third-party channels, the disclaimer is applied for image, file, and text message types. 
 * @member {Array.<module:sunshine-conversations-client/sunshine-conversations-client.model/Author.SubtypesEnum>} subtypes
 */
Author.prototype['subtypes'] = undefined;

/**
 * The id of the user. Only supported when `type` is user.
 * @member {String} userId
 */
Author.prototype['userId'] = undefined;

/**
 * The externalId of the user. Only supported when `type` is user.
 * @member {String} userExternalId
 */
Author.prototype['userExternalId'] = undefined;

/**
 * The display name of the message author.
 * @member {String} displayName
 */
Author.prototype['displayName'] = undefined;

/**
 * A custom message icon URL. The image must be JPG, PNG, or GIF format.
 * @member {String} avatarUrl
 */
Author.prototype['avatarUrl'] = undefined;

/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Author['TypeEnum'] = {
  /**
   * value: "business"
   * @const
   */
  "business": "business",
  /**
   * value: "user"
   * @const
   */
  "user": "user"
};

/**
 * Allowed values for the <code>subtypes</code> property.
 * @enum {String}
 * @readonly
 */
Author['SubtypesEnum'] = {
  /**
   * value: "AI"
   * @const
   */
  "AI": "AI"
};
var _default = exports["default"] = Author;