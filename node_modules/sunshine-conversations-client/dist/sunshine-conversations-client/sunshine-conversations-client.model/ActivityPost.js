"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _ActivityPostAllOf = _interopRequireDefault(require("./ActivityPostAllOf"));
var _ActivityTypes = _interopRequireDefault(require("./ActivityTypes"));
var _Author = _interopRequireDefault(require("./Author"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Sunshine Conversations API
 *
 * The version of the OpenAPI document: 12.5.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.3.1
 *
 * Do not edit the class manually.
 *
 */
/**
 * The ActivityPost model module.
 * @module sunshine-conversations-client/sunshine-conversations-client.model/ActivityPost
 * @version 12.5.0
 */
var ActivityPost = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>ActivityPost</code>.
   * @alias module:sunshine-conversations-client/sunshine-conversations-client.model/ActivityPost
   * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/ActivityPostAllOf
   * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/ActivityTypes
   * @param author {module:sunshine-conversations-client/sunshine-conversations-client.model/Author} The author of the activity.
   * @param type {module:sunshine-conversations-client/sunshine-conversations-client.model/ActivityPost.TypeEnum} If the author type is `user`, only `conversation:read` is supported.
   */
  function ActivityPost(author, type) {
    _classCallCheck(this, ActivityPost);
    _ActivityPostAllOf["default"].initialize(this);
    _ActivityTypes["default"].initialize(this);
    ActivityPost.initialize(this, author, type);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  return _createClass(ActivityPost, [{
    key: "getAuthor",
    value:
    /**
         * Returns The author of the activity.
         * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/Author}
         */
    function getAuthor() {
      return this.author;
    }

    /**
     * Sets The author of the activity.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/Author} author The author of the activity.
     */
  }, {
    key: "setAuthor",
    value: function setAuthor(author) {
      this['author'] = author;
    }
    /**
         * Returns If the author type is `user`, only `conversation:read` is supported.
         * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/ActivityPost.TypeEnum}
         */
  }, {
    key: "getType",
    value: function getType() {
      return this.type;
    }

    /**
     * Sets If the author type is `user`, only `conversation:read` is supported.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/ActivityPost.TypeEnum} type If the author type is `user`, only `conversation:read` is supported.
     */
  }, {
    key: "setType",
    value: function setType(type) {
      this['type'] = type;
    }
  }], [{
    key: "initialize",
    value: function initialize(obj, author, type) {
      obj['author'] = author;
      obj['type'] = type;
    }

    /**
     * Constructs a <code>ActivityPost</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/ActivityPost} obj Optional instance to populate.
     * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/ActivityPost} The populated <code>ActivityPost</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new ActivityPost();
        _ActivityPostAllOf["default"].constructFromObject(data, obj);
        _ActivityTypes["default"].constructFromObject(data, obj);
        if (data.hasOwnProperty('author')) {
          obj['author'] = _ApiClient["default"].convertToType(data['author'], _Author["default"]);
        }
        if (data.hasOwnProperty('type')) {
          obj['type'] = _ApiClient["default"].convertToType(data['type'], 'String');
        }
      }
      return obj;
    }
  }]);
}();
/**
 * The author of the activity.
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/Author} author
 */
ActivityPost.prototype['author'] = undefined;

/**
 * If the author type is `user`, only `conversation:read` is supported.
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/ActivityPost.TypeEnum} type
 */
ActivityPost.prototype['type'] = undefined;

// Implement ActivityPostAllOf interface:
/**
 * The author of the activity.
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/Author} author
 */
_ActivityPostAllOf["default"].prototype['author'] = undefined;
// Implement ActivityTypes interface:
/**
 * If the author type is `user`, only `conversation:read` is supported.
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/ActivityTypes.TypeEnum} type
 */
_ActivityTypes["default"].prototype['type'] = undefined;

/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ActivityPost['TypeEnum'] = {
  /**
   * value: "conversation:read"
   * @const
   */
  "conversation:read": "conversation:read",
  /**
   * value: "typing:start"
   * @const
   */
  "typing:start": "typing:start",
  /**
   * value: "typing:stop"
   * @const
   */
  "typing:stop": "typing:stop"
};
var _default = exports["default"] = ActivityPost;