"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _Client = _interopRequireDefault(require("./Client"));
var _ConversationTruncated = _interopRequireDefault(require("./ConversationTruncated"));
var _UserTruncated = _interopRequireDefault(require("./UserTruncated"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Sunshine Conversations API
 *
 * The version of the OpenAPI document: 12.5.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.3.1
 *
 * Do not edit the class manually.
 *
 */
/**
 * The ClientUpdateEventAllOfPayload model module.
 * @module sunshine-conversations-client/sunshine-conversations-client.model/ClientUpdateEventAllOfPayload
 * @version 12.5.0
 */
var ClientUpdateEventAllOfPayload = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>ClientUpdateEventAllOfPayload</code>.
   * The payload of the event. The contents of this object depend on the type of event.
   * @alias module:sunshine-conversations-client/sunshine-conversations-client.model/ClientUpdateEventAllOfPayload
   */
  function ClientUpdateEventAllOfPayload() {
    _classCallCheck(this, ClientUpdateEventAllOfPayload);
    ClientUpdateEventAllOfPayload.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  return _createClass(ClientUpdateEventAllOfPayload, [{
    key: "getConversation",
    value:
    /**
         * Returns The conversation which triggered a change in the client.
         * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/ConversationTruncated}
         */
    function getConversation() {
      return this.conversation;
    }

    /**
     * Sets The conversation which triggered a change in the client.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/ConversationTruncated} conversation The conversation which triggered a change in the client.
     */
  }, {
    key: "setConversation",
    value: function setConversation(conversation) {
      this['conversation'] = conversation;
    }
    /**
         * Returns The user associated with the client.
         * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/UserTruncated}
         */
  }, {
    key: "getUser",
    value: function getUser() {
      return this.user;
    }

    /**
     * Sets The user associated with the client.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/UserTruncated} user The user associated with the client.
     */
  }, {
    key: "setUser",
    value: function setUser(user) {
      this['user'] = user;
    }
    /**
         * Returns The updated client.
         * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/Client}
         */
  }, {
    key: "getClient",
    value: function getClient() {
      return this.client;
    }

    /**
     * Sets The updated client.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/Client} client The updated client.
     */
  }, {
    key: "setClient",
    value: function setClient(client) {
      this['client'] = client;
    }
    /**
         * Returns The reason for which the client was updated. * `confirmed` - The client is now active and ready to use. * `blocked` - The user has unsubscribed from the conversation. * `unblocked` - A previously unsubscribed user resubscribed to the conversation. * `matched` - The channel found a user that matches the information provided. 
         * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/ClientUpdateEventAllOfPayload.ReasonEnum}
         */
  }, {
    key: "getReason",
    value: function getReason() {
      return this.reason;
    }

    /**
     * Sets The reason for which the client was updated. * `confirmed` - The client is now active and ready to use. * `blocked` - The user has unsubscribed from the conversation. * `unblocked` - A previously unsubscribed user resubscribed to the conversation. * `matched` - The channel found a user that matches the information provided. 
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/ClientUpdateEventAllOfPayload.ReasonEnum} reason The reason for which the client was updated. * `confirmed` - The client is now active and ready to use. * `blocked` - The user has unsubscribed from the conversation. * `unblocked` - A previously unsubscribed user resubscribed to the conversation. * `matched` - The channel found a user that matches the information provided. 
     */
  }, {
    key: "setReason",
    value: function setReason(reason) {
      this['reason'] = reason;
    }
  }], [{
    key: "initialize",
    value: function initialize(obj) {}

    /**
     * Constructs a <code>ClientUpdateEventAllOfPayload</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/ClientUpdateEventAllOfPayload} obj Optional instance to populate.
     * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/ClientUpdateEventAllOfPayload} The populated <code>ClientUpdateEventAllOfPayload</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new ClientUpdateEventAllOfPayload();
        if (data.hasOwnProperty('conversation')) {
          obj['conversation'] = _ApiClient["default"].convertToType(data['conversation'], _ConversationTruncated["default"]);
        }
        if (data.hasOwnProperty('user')) {
          obj['user'] = _ApiClient["default"].convertToType(data['user'], _UserTruncated["default"]);
        }
        if (data.hasOwnProperty('client')) {
          obj['client'] = _ApiClient["default"].convertToType(data['client'], _Client["default"]);
        }
        if (data.hasOwnProperty('reason')) {
          obj['reason'] = _ApiClient["default"].convertToType(data['reason'], 'String');
        }
      }
      return obj;
    }
  }]);
}();
/**
 * The conversation which triggered a change in the client.
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/ConversationTruncated} conversation
 */
ClientUpdateEventAllOfPayload.prototype['conversation'] = undefined;

/**
 * The user associated with the client.
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/UserTruncated} user
 */
ClientUpdateEventAllOfPayload.prototype['user'] = undefined;

/**
 * The updated client.
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/Client} client
 */
ClientUpdateEventAllOfPayload.prototype['client'] = undefined;

/**
 * The reason for which the client was updated. * `confirmed` - The client is now active and ready to use. * `blocked` - The user has unsubscribed from the conversation. * `unblocked` - A previously unsubscribed user resubscribed to the conversation. * `matched` - The channel found a user that matches the information provided. 
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/ClientUpdateEventAllOfPayload.ReasonEnum} reason
 */
ClientUpdateEventAllOfPayload.prototype['reason'] = undefined;

/**
 * Allowed values for the <code>reason</code> property.
 * @enum {String}
 * @readonly
 */
ClientUpdateEventAllOfPayload['ReasonEnum'] = {
  /**
   * value: "confirmed"
   * @const
   */
  "confirmed": "confirmed",
  /**
   * value: "blocked"
   * @const
   */
  "blocked": "blocked",
  /**
   * value: "unblocked"
   * @const
   */
  "unblocked": "unblocked",
  /**
   * value: "matched"
   * @const
   */
  "matched": "matched"
};
var _default = exports["default"] = ClientUpdateEventAllOfPayload;