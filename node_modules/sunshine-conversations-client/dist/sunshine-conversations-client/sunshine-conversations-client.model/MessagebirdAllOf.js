"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Sunshine Conversations API
 *
 * The version of the OpenAPI document: 12.5.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.3.1
 *
 * Do not edit the class manually.
 *
 */
/**
 * The MessagebirdAllOf model module.
 * @module sunshine-conversations-client/sunshine-conversations-client.model/MessagebirdAllOf
 * @version 12.5.0
 */
var MessagebirdAllOf = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>MessagebirdAllOf</code>.
   * @alias module:sunshine-conversations-client/sunshine-conversations-client.model/MessagebirdAllOf
   * @param accessKey {String} The public API key of your MessageBird account.
   * @param signingKey {String} The signing key of your MessageBird account. Used to validate the webhooks' origin.
   * @param originator {String} Sunshine Conversations will receive all messages sent to this phone number.
   */
  function MessagebirdAllOf(accessKey, signingKey, originator) {
    _classCallCheck(this, MessagebirdAllOf);
    MessagebirdAllOf.initialize(this, accessKey, signingKey, originator);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  return _createClass(MessagebirdAllOf, [{
    key: "getType",
    value:
    /**
         * Returns To configure a MessageBird integration, acquire the accessKey, the signingKey and the MessageBird number you would like to use, then call the Create Integration endpoint. The response will include the integration’s `_id` and `webhookSecret`, which must be used to configure the webhook in MessageBird. In the Flow Builder for the MessageBird number you’ve used to integrate, add a new step with the following settings: - Create a new Call HTTP endpoint with SMS flow. - Select your desired SMS number for Incoming SMS. - Click on Forward to URL and set its method to POST. - Then, using the integration _id and webhookSecret returned from the create integration call, enter the following into the URL field:  `https://app.smooch.io/api/messagebird/webhooks/{appId}/{integrationId}/{webhookSecret}` - Select application/json for the Set Content-Type header field. - Save and publish your changes. 
         * @return {String}
         */
    function getType() {
      return this.type;
    }

    /**
     * Sets To configure a MessageBird integration, acquire the accessKey, the signingKey and the MessageBird number you would like to use, then call the Create Integration endpoint. The response will include the integration’s `_id` and `webhookSecret`, which must be used to configure the webhook in MessageBird. In the Flow Builder for the MessageBird number you’ve used to integrate, add a new step with the following settings: - Create a new Call HTTP endpoint with SMS flow. - Select your desired SMS number for Incoming SMS. - Click on Forward to URL and set its method to POST. - Then, using the integration _id and webhookSecret returned from the create integration call, enter the following into the URL field:  `https://app.smooch.io/api/messagebird/webhooks/{appId}/{integrationId}/{webhookSecret}` - Select application/json for the Set Content-Type header field. - Save and publish your changes. 
     * @param {String} type To configure a MessageBird integration, acquire the accessKey, the signingKey and the MessageBird number you would like to use, then call the Create Integration endpoint. The response will include the integration’s `_id` and `webhookSecret`, which must be used to configure the webhook in MessageBird. In the Flow Builder for the MessageBird number you’ve used to integrate, add a new step with the following settings: - Create a new Call HTTP endpoint with SMS flow. - Select your desired SMS number for Incoming SMS. - Click on Forward to URL and set its method to POST. - Then, using the integration _id and webhookSecret returned from the create integration call, enter the following into the URL field:  `https://app.smooch.io/api/messagebird/webhooks/{appId}/{integrationId}/{webhookSecret}` - Select application/json for the Set Content-Type header field. - Save and publish your changes. 
     */
  }, {
    key: "setType",
    value: function setType(type) {
      this['type'] = type;
    }
    /**
         * Returns The public API key of your MessageBird account.
         * @return {String}
         */
  }, {
    key: "getAccessKey",
    value: function getAccessKey() {
      return this.accessKey;
    }

    /**
     * Sets The public API key of your MessageBird account.
     * @param {String} accessKey The public API key of your MessageBird account.
     */
  }, {
    key: "setAccessKey",
    value: function setAccessKey(accessKey) {
      this['accessKey'] = accessKey;
    }
    /**
         * Returns The signing key of your MessageBird account. Used to validate the webhooks' origin.
         * @return {String}
         */
  }, {
    key: "getSigningKey",
    value: function getSigningKey() {
      return this.signingKey;
    }

    /**
     * Sets The signing key of your MessageBird account. Used to validate the webhooks' origin.
     * @param {String} signingKey The signing key of your MessageBird account. Used to validate the webhooks' origin.
     */
  }, {
    key: "setSigningKey",
    value: function setSigningKey(signingKey) {
      this['signingKey'] = signingKey;
    }
    /**
         * Returns Sunshine Conversations will receive all messages sent to this phone number.
         * @return {String}
         */
  }, {
    key: "getOriginator",
    value: function getOriginator() {
      return this.originator;
    }

    /**
     * Sets Sunshine Conversations will receive all messages sent to this phone number.
     * @param {String} originator Sunshine Conversations will receive all messages sent to this phone number.
     */
  }, {
    key: "setOriginator",
    value: function setOriginator(originator) {
      this['originator'] = originator;
    }
    /**
         * Returns The secret that is used to configure webhooks in MessageBird.
         * @return {String}
         */
  }, {
    key: "getWebhookSecret",
    value: function getWebhookSecret() {
      return this.webhookSecret;
    }

    /**
     * Sets The secret that is used to configure webhooks in MessageBird.
     * @param {String} webhookSecret The secret that is used to configure webhooks in MessageBird.
     */
  }, {
    key: "setWebhookSecret",
    value: function setWebhookSecret(webhookSecret) {
      this['webhookSecret'] = webhookSecret;
    }
  }], [{
    key: "initialize",
    value: function initialize(obj, accessKey, signingKey, originator) {
      obj['accessKey'] = accessKey;
      obj['signingKey'] = signingKey;
      obj['originator'] = originator;
    }

    /**
     * Constructs a <code>MessagebirdAllOf</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/MessagebirdAllOf} obj Optional instance to populate.
     * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/MessagebirdAllOf} The populated <code>MessagebirdAllOf</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new MessagebirdAllOf();
        if (data.hasOwnProperty('type')) {
          obj['type'] = _ApiClient["default"].convertToType(data['type'], 'String');
        }
        if (data.hasOwnProperty('accessKey')) {
          obj['accessKey'] = _ApiClient["default"].convertToType(data['accessKey'], 'String');
        }
        if (data.hasOwnProperty('signingKey')) {
          obj['signingKey'] = _ApiClient["default"].convertToType(data['signingKey'], 'String');
        }
        if (data.hasOwnProperty('originator')) {
          obj['originator'] = _ApiClient["default"].convertToType(data['originator'], 'String');
        }
        if (data.hasOwnProperty('webhookSecret')) {
          obj['webhookSecret'] = _ApiClient["default"].convertToType(data['webhookSecret'], 'String');
        }
      }
      return obj;
    }
  }]);
}();
/**
 * To configure a MessageBird integration, acquire the accessKey, the signingKey and the MessageBird number you would like to use, then call the Create Integration endpoint. The response will include the integration’s `_id` and `webhookSecret`, which must be used to configure the webhook in MessageBird. In the Flow Builder for the MessageBird number you’ve used to integrate, add a new step with the following settings: - Create a new Call HTTP endpoint with SMS flow. - Select your desired SMS number for Incoming SMS. - Click on Forward to URL and set its method to POST. - Then, using the integration _id and webhookSecret returned from the create integration call, enter the following into the URL field:  `https://app.smooch.io/api/messagebird/webhooks/{appId}/{integrationId}/{webhookSecret}` - Select application/json for the Set Content-Type header field. - Save and publish your changes. 
 * @member {String} type
 * @default 'messagebird'
 */
MessagebirdAllOf.prototype['type'] = 'messagebird';

/**
 * The public API key of your MessageBird account.
 * @member {String} accessKey
 */
MessagebirdAllOf.prototype['accessKey'] = undefined;

/**
 * The signing key of your MessageBird account. Used to validate the webhooks' origin.
 * @member {String} signingKey
 */
MessagebirdAllOf.prototype['signingKey'] = undefined;

/**
 * Sunshine Conversations will receive all messages sent to this phone number.
 * @member {String} originator
 */
MessagebirdAllOf.prototype['originator'] = undefined;

/**
 * The secret that is used to configure webhooks in MessageBird.
 * @member {String} webhookSecret
 */
MessagebirdAllOf.prototype['webhookSecret'] = undefined;
var _default = exports["default"] = MessagebirdAllOf;