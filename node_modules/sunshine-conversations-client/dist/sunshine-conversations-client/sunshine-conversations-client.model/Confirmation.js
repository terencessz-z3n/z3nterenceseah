"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _MessagePost = _interopRequireDefault(require("./MessagePost"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Sunshine Conversations API
 *
 * The version of the OpenAPI document: 12.5.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.3.1
 *
 * Do not edit the class manually.
 *
 */
/**
 * The Confirmation model module.
 * @module sunshine-conversations-client/sunshine-conversations-client.model/Confirmation
 * @version 12.5.0
 */
var Confirmation = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>Confirmation</code>.
   * The confirmation options of the link request.
   * @alias module:sunshine-conversations-client/sunshine-conversations-client.model/Confirmation
   * @param type {module:sunshine-conversations-client/sunshine-conversations-client.model/Confirmation.TypeEnum} The type of confirmation.
   */
  function Confirmation(type) {
    _classCallCheck(this, Confirmation);
    Confirmation.initialize(this, type);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  return _createClass(Confirmation, [{
    key: "getType",
    value:
    /**
         * Returns The type of confirmation.
         * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/Confirmation.TypeEnum}
         */
    function getType() {
      return this.type;
    }

    /**
     * Sets The type of confirmation.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/Confirmation.TypeEnum} type The type of confirmation.
     */
  }, {
    key: "setType",
    value: function setType(type) {
      this['type'] = type;
    }
    /**
         * Returns The message used to reach out to the user, if desired. Messages sent via this method can only be of type text and image. If actions are included they can only be of type link. The confirmation message will not be added to the user’s conversation.
         * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/MessagePost}
         */
  }, {
    key: "getMessage",
    value: function getMessage() {
      return this.message;
    }

    /**
     * Sets The message used to reach out to the user, if desired. Messages sent via this method can only be of type text and image. If actions are included they can only be of type link. The confirmation message will not be added to the user’s conversation.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/MessagePost} message The message used to reach out to the user, if desired. Messages sent via this method can only be of type text and image. If actions are included they can only be of type link. The confirmation message will not be added to the user’s conversation.
     */
  }, {
    key: "setMessage",
    value: function setMessage(message) {
      this['message'] = message;
    }
  }], [{
    key: "initialize",
    value: function initialize(obj, type) {
      obj['type'] = type;
    }

    /**
     * Constructs a <code>Confirmation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/Confirmation} obj Optional instance to populate.
     * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/Confirmation} The populated <code>Confirmation</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new Confirmation();
        if (data.hasOwnProperty('type')) {
          obj['type'] = _ApiClient["default"].convertToType(data['type'], 'String');
        }
        if (data.hasOwnProperty('message')) {
          obj['message'] = _ApiClient["default"].convertToType(data['message'], _MessagePost["default"]);
        }
      }
      return obj;
    }
  }]);
}();
/**
 * The type of confirmation.
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/Confirmation.TypeEnum} type
 */
Confirmation.prototype['type'] = undefined;

/**
 * The message used to reach out to the user, if desired. Messages sent via this method can only be of type text and image. If actions are included they can only be of type link. The confirmation message will not be added to the user’s conversation.
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/MessagePost} message
 */
Confirmation.prototype['message'] = undefined;

/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Confirmation['TypeEnum'] = {
  /**
   * value: "immediate"
   * @const
   */
  "immediate": "immediate",
  /**
   * value: "userActivity"
   * @const
   */
  "userActivity": "userActivity",
  /**
   * value: "prompt"
   * @const
   */
  "prompt": "prompt"
};
var _default = exports["default"] = Confirmation;