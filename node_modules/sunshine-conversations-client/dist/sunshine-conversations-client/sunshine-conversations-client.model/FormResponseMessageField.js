"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _Field = _interopRequireDefault(require("./Field"));
var _FormResponseMessageFieldAllOf = _interopRequireDefault(require("./FormResponseMessageFieldAllOf"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Sunshine Conversations API
 *
 * The version of the OpenAPI document: 12.5.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.3.1
 *
 * Do not edit the class manually.
 *
 */
/**
 * The FormResponseMessageField model module.
 * @module sunshine-conversations-client/sunshine-conversations-client.model/FormResponseMessageField
 * @version 12.5.0
 */
var FormResponseMessageField = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>FormResponseMessageField</code>.
   * @alias module:sunshine-conversations-client/sunshine-conversations-client.model/FormResponseMessageField
   * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/Field
   * @implements module:sunshine-conversations-client/sunshine-conversations-client.model/FormResponseMessageFieldAllOf
   * @param type {module:sunshine-conversations-client/sunshine-conversations-client.model/FormResponseMessageField.TypeEnum} The field type.
   * @param name {String} The name of the field. Must be unique per form or formResponse.
   * @param label {String} The label of the field. What the field is displayed as on Web Messenger.
   */
  function FormResponseMessageField(type, name, label) {
    _classCallCheck(this, FormResponseMessageField);
    _Field["default"].initialize(this, type, name, label);
    _FormResponseMessageFieldAllOf["default"].initialize(this);
    FormResponseMessageField.initialize(this, type, name, label);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  return _createClass(FormResponseMessageField, [{
    key: "getType",
    value:
    /**
         * Returns The field type.
         * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/FormResponseMessageField.TypeEnum}
         */
    function getType() {
      return this.type;
    }

    /**
     * Sets The field type.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/FormResponseMessageField.TypeEnum} type The field type.
     */
  }, {
    key: "setType",
    value: function setType(type) {
      this['type'] = type;
    }
    /**
         * Returns The name of the field. Must be unique per form or formResponse.
         * @return {String}
         */
  }, {
    key: "getName",
    value: function getName() {
      return this.name;
    }

    /**
     * Sets The name of the field. Must be unique per form or formResponse.
     * @param {String} name The name of the field. Must be unique per form or formResponse.
     */
  }, {
    key: "setName",
    value: function setName(name) {
      this['name'] = name;
    }
    /**
         * Returns The label of the field. What the field is displayed as on Web Messenger.
         * @return {String}
         */
  }, {
    key: "getLabel",
    value: function getLabel() {
      return this.label;
    }

    /**
     * Sets The label of the field. What the field is displayed as on Web Messenger.
     * @param {String} label The label of the field. What the field is displayed as on Web Messenger.
     */
  }, {
    key: "setLabel",
    value: function setLabel(label) {
      this['label'] = label;
    }
    /**
         * Returns Specifies the response for a text field.
         * @return {String}
         */
  }, {
    key: "getText",
    value: function getText() {
      return this.text;
    }

    /**
     * Sets Specifies the response for a text field.
     * @param {String} text Specifies the response for a text field.
     */
  }, {
    key: "setText",
    value: function setText(text) {
      this['text'] = text;
    }
    /**
         * Returns Specifies the response for a email field.
         * @return {String}
         */
  }, {
    key: "getEmail",
    value: function getEmail() {
      return this.email;
    }

    /**
     * Sets Specifies the response for a email field.
     * @param {String} email Specifies the response for a email field.
     */
  }, {
    key: "setEmail",
    value: function setEmail(email) {
      this['email'] = email;
    }
    /**
         * Returns Array of objects representing the response for a field of type select. Form and formResponse messages only.
         * @return {Array.<Object>}
         */
  }, {
    key: "getSelect",
    value: function getSelect() {
      return this.select;
    }

    /**
     * Sets Array of objects representing the response for a field of type select. Form and formResponse messages only.
     * @param {Array.<Object>} select Array of objects representing the response for a field of type select. Form and formResponse messages only.
     */
  }, {
    key: "setSelect",
    value: function setSelect(select) {
      this['select'] = select;
    }
    /**
         * Returns The messageId for the form that this response belongs to.
         * @return {String}
         */
  }, {
    key: "getQuotedMessageId",
    value: function getQuotedMessageId() {
      return this.quotedMessageId;
    }

    /**
     * Sets The messageId for the form that this response belongs to.
     * @param {String} quotedMessageId The messageId for the form that this response belongs to.
     */
  }, {
    key: "setQuotedMessageId",
    value: function setQuotedMessageId(quotedMessageId) {
      this['quotedMessageId'] = quotedMessageId;
    }
  }], [{
    key: "initialize",
    value: function initialize(obj, type, name, label) {
      obj['type'] = type;
      obj['name'] = name;
      obj['label'] = label;
    }

    /**
     * Constructs a <code>FormResponseMessageField</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/FormResponseMessageField} obj Optional instance to populate.
     * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/FormResponseMessageField} The populated <code>FormResponseMessageField</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new FormResponseMessageField();
        _Field["default"].constructFromObject(data, obj);
        _FormResponseMessageFieldAllOf["default"].constructFromObject(data, obj);
        if (data.hasOwnProperty('type')) {
          obj['type'] = _ApiClient["default"].convertToType(data['type'], 'String');
        }
        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }
        if (data.hasOwnProperty('label')) {
          obj['label'] = _ApiClient["default"].convertToType(data['label'], 'String');
        }
        if (data.hasOwnProperty('text')) {
          obj['text'] = _ApiClient["default"].convertToType(data['text'], 'String');
        }
        if (data.hasOwnProperty('email')) {
          obj['email'] = _ApiClient["default"].convertToType(data['email'], 'String');
        }
        if (data.hasOwnProperty('select')) {
          obj['select'] = _ApiClient["default"].convertToType(data['select'], [Object]);
        }
        if (data.hasOwnProperty('quotedMessageId')) {
          obj['quotedMessageId'] = _ApiClient["default"].convertToType(data['quotedMessageId'], 'String');
        }
      }
      return obj;
    }
  }]);
}();
/**
 * The field type.
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/FormResponseMessageField.TypeEnum} type
 */
FormResponseMessageField.prototype['type'] = undefined;

/**
 * The name of the field. Must be unique per form or formResponse.
 * @member {String} name
 */
FormResponseMessageField.prototype['name'] = undefined;

/**
 * The label of the field. What the field is displayed as on Web Messenger.
 * @member {String} label
 */
FormResponseMessageField.prototype['label'] = undefined;

/**
 * Specifies the response for a text field.
 * @member {String} text
 */
FormResponseMessageField.prototype['text'] = undefined;

/**
 * Specifies the response for a email field.
 * @member {String} email
 */
FormResponseMessageField.prototype['email'] = undefined;

/**
 * Array of objects representing the response for a field of type select. Form and formResponse messages only.
 * @member {Array.<Object>} select
 */
FormResponseMessageField.prototype['select'] = undefined;

/**
 * The messageId for the form that this response belongs to.
 * @member {String} quotedMessageId
 */
FormResponseMessageField.prototype['quotedMessageId'] = undefined;

// Implement Field interface:
/**
 * The field type.
 * @member {module:sunshine-conversations-client/sunshine-conversations-client.model/Field.TypeEnum} type
 */
_Field["default"].prototype['type'] = undefined;
/**
 * The name of the field. Must be unique per form or formResponse.
 * @member {String} name
 */
_Field["default"].prototype['name'] = undefined;
/**
 * The label of the field. What the field is displayed as on Web Messenger.
 * @member {String} label
 */
_Field["default"].prototype['label'] = undefined;
/**
 * Specifies the response for a text field.
 * @member {String} text
 */
_Field["default"].prototype['text'] = undefined;
/**
 * Specifies the response for a email field.
 * @member {String} email
 */
_Field["default"].prototype['email'] = undefined;
/**
 * Array of objects representing the response for a field of type select. Form and formResponse messages only.
 * @member {Array.<Object>} select
 */
_Field["default"].prototype['select'] = undefined;
// Implement FormResponseMessageFieldAllOf interface:
/**
 * The messageId for the form that this response belongs to.
 * @member {String} quotedMessageId
 */
_FormResponseMessageFieldAllOf["default"].prototype['quotedMessageId'] = undefined;

/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
FormResponseMessageField['TypeEnum'] = {
  /**
   * value: "email"
   * @const
   */
  "email": "email",
  /**
   * value: "select"
   * @const
   */
  "select": "select",
  /**
   * value: "text"
   * @const
   */
  "text": "text"
};
var _default = exports["default"] = FormResponseMessageField;