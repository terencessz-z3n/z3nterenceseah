"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Sunshine Conversations API
 *
 * The version of the OpenAPI document: 12.5.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.3.1
 *
 * Do not edit the class manually.
 *
 */
/**
 * The SwitchboardIntegration model module.
 * @module sunshine-conversations-client/sunshine-conversations-client.model/SwitchboardIntegration
 * @version 12.5.0
 */
var SwitchboardIntegration = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>SwitchboardIntegration</code>.
   * @alias module:sunshine-conversations-client/sunshine-conversations-client.model/SwitchboardIntegration
   * @param id {String} The unique ID of the switchboard integration.
   * @param name {String} Identifier for use in control transfer protocols. Restricted to alphanumeric characters, `-` and `_`.
   * @param integrationId {String} Id of the integration that should deliver events routed by the switchboard.
   * @param integrationType {String} Type of integration that should deliver events routed by the switchboard. If referencing an OAuth integration, the clientId issued by Sunshine Conversations during the OAuth partnership process will be the value of integrationType.
   * @param deliverStandbyEvents {Boolean} Setting to determine if webhooks should be sent when the switchboard integration is not in control of a conversation (standby status)
   */
  function SwitchboardIntegration(id, name, integrationId, integrationType, deliverStandbyEvents) {
    _classCallCheck(this, SwitchboardIntegration);
    SwitchboardIntegration.initialize(this, id, name, integrationId, integrationType, deliverStandbyEvents);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  return _createClass(SwitchboardIntegration, [{
    key: "getId",
    value:
    /**
         * Returns The unique ID of the switchboard integration.
         * @return {String}
         */
    function getId() {
      return this.id;
    }

    /**
     * Sets The unique ID of the switchboard integration.
     * @param {String} id The unique ID of the switchboard integration.
     */
  }, {
    key: "setId",
    value: function setId(id) {
      this['id'] = id;
    }
    /**
         * Returns Identifier for use in control transfer protocols. Restricted to alphanumeric characters, `-` and `_`.
         * @return {String}
         */
  }, {
    key: "getName",
    value: function getName() {
      return this.name;
    }

    /**
     * Sets Identifier for use in control transfer protocols. Restricted to alphanumeric characters, `-` and `_`.
     * @param {String} name Identifier for use in control transfer protocols. Restricted to alphanumeric characters, `-` and `_`.
     */
  }, {
    key: "setName",
    value: function setName(name) {
      this['name'] = name;
    }
    /**
         * Returns Id of the integration that should deliver events routed by the switchboard.
         * @return {String}
         */
  }, {
    key: "getIntegrationId",
    value: function getIntegrationId() {
      return this.integrationId;
    }

    /**
     * Sets Id of the integration that should deliver events routed by the switchboard.
     * @param {String} integrationId Id of the integration that should deliver events routed by the switchboard.
     */
  }, {
    key: "setIntegrationId",
    value: function setIntegrationId(integrationId) {
      this['integrationId'] = integrationId;
    }
    /**
         * Returns Type of integration that should deliver events routed by the switchboard. If referencing an OAuth integration, the clientId issued by Sunshine Conversations during the OAuth partnership process will be the value of integrationType.
         * @return {String}
         */
  }, {
    key: "getIntegrationType",
    value: function getIntegrationType() {
      return this.integrationType;
    }

    /**
     * Sets Type of integration that should deliver events routed by the switchboard. If referencing an OAuth integration, the clientId issued by Sunshine Conversations during the OAuth partnership process will be the value of integrationType.
     * @param {String} integrationType Type of integration that should deliver events routed by the switchboard. If referencing an OAuth integration, the clientId issued by Sunshine Conversations during the OAuth partnership process will be the value of integrationType.
     */
  }, {
    key: "setIntegrationType",
    value: function setIntegrationType(integrationType) {
      this['integrationType'] = integrationType;
    }
    /**
         * Returns Setting to determine if webhooks should be sent when the switchboard integration is not in control of a conversation (standby status)
         * @return {Boolean}
         */
  }, {
    key: "getDeliverStandbyEvents",
    value: function getDeliverStandbyEvents() {
      return this.deliverStandbyEvents;
    }

    /**
     * Sets Setting to determine if webhooks should be sent when the switchboard integration is not in control of a conversation (standby status)
     * @param {Boolean} deliverStandbyEvents Setting to determine if webhooks should be sent when the switchboard integration is not in control of a conversation (standby status)
     */
  }, {
    key: "setDeliverStandbyEvents",
    value: function setDeliverStandbyEvents(deliverStandbyEvents) {
      this['deliverStandbyEvents'] = deliverStandbyEvents;
    }
    /**
         * Returns The switchboard integration id to which control of a conversation is passed / offered by default.
         * @return {String}
         */
  }, {
    key: "getNextSwitchboardIntegrationId",
    value: function getNextSwitchboardIntegrationId() {
      return this.nextSwitchboardIntegrationId;
    }

    /**
     * Sets The switchboard integration id to which control of a conversation is passed / offered by default.
     * @param {String} nextSwitchboardIntegrationId The switchboard integration id to which control of a conversation is passed / offered by default.
     */
  }, {
    key: "setNextSwitchboardIntegrationId",
    value: function setNextSwitchboardIntegrationId(nextSwitchboardIntegrationId) {
      this['nextSwitchboardIntegrationId'] = nextSwitchboardIntegrationId;
    }
    /**
         * Returns Number of messages to include in the message history context.
         * minimum: 1
         * maximum: 10
         * @return {Number}
         */
  }, {
    key: "getMessageHistoryCount",
    value: function getMessageHistoryCount() {
      return this.messageHistoryCount;
    }

    /**
     * Sets Number of messages to include in the message history context.
     * @param {Number} messageHistoryCount Number of messages to include in the message history context.
     */
  }, {
    key: "setMessageHistoryCount",
    value: function setMessageHistoryCount(messageHistoryCount) {
      this['messageHistoryCount'] = messageHistoryCount;
    }
  }], [{
    key: "initialize",
    value: function initialize(obj, id, name, integrationId, integrationType, deliverStandbyEvents) {
      obj['id'] = id;
      obj['name'] = name;
      obj['integrationId'] = integrationId;
      obj['integrationType'] = integrationType;
      obj['deliverStandbyEvents'] = deliverStandbyEvents;
    }

    /**
     * Constructs a <code>SwitchboardIntegration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/SwitchboardIntegration} obj Optional instance to populate.
     * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/SwitchboardIntegration} The populated <code>SwitchboardIntegration</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new SwitchboardIntegration();
        if (data.hasOwnProperty('id')) {
          obj['id'] = _ApiClient["default"].convertToType(data['id'], 'String');
        }
        if (data.hasOwnProperty('name')) {
          obj['name'] = _ApiClient["default"].convertToType(data['name'], 'String');
        }
        if (data.hasOwnProperty('integrationId')) {
          obj['integrationId'] = _ApiClient["default"].convertToType(data['integrationId'], 'String');
        }
        if (data.hasOwnProperty('integrationType')) {
          obj['integrationType'] = _ApiClient["default"].convertToType(data['integrationType'], 'String');
        }
        if (data.hasOwnProperty('deliverStandbyEvents')) {
          obj['deliverStandbyEvents'] = _ApiClient["default"].convertToType(data['deliverStandbyEvents'], 'Boolean');
        }
        if (data.hasOwnProperty('nextSwitchboardIntegrationId')) {
          obj['nextSwitchboardIntegrationId'] = _ApiClient["default"].convertToType(data['nextSwitchboardIntegrationId'], 'String');
        }
        if (data.hasOwnProperty('messageHistoryCount')) {
          obj['messageHistoryCount'] = _ApiClient["default"].convertToType(data['messageHistoryCount'], 'Number');
        }
      }
      return obj;
    }
  }]);
}();
/**
 * The unique ID of the switchboard integration.
 * @member {String} id
 */
SwitchboardIntegration.prototype['id'] = undefined;

/**
 * Identifier for use in control transfer protocols. Restricted to alphanumeric characters, `-` and `_`.
 * @member {String} name
 */
SwitchboardIntegration.prototype['name'] = undefined;

/**
 * Id of the integration that should deliver events routed by the switchboard.
 * @member {String} integrationId
 */
SwitchboardIntegration.prototype['integrationId'] = undefined;

/**
 * Type of integration that should deliver events routed by the switchboard. If referencing an OAuth integration, the clientId issued by Sunshine Conversations during the OAuth partnership process will be the value of integrationType.
 * @member {String} integrationType
 */
SwitchboardIntegration.prototype['integrationType'] = undefined;

/**
 * Setting to determine if webhooks should be sent when the switchboard integration is not in control of a conversation (standby status)
 * @member {Boolean} deliverStandbyEvents
 */
SwitchboardIntegration.prototype['deliverStandbyEvents'] = undefined;

/**
 * The switchboard integration id to which control of a conversation is passed / offered by default.
 * @member {String} nextSwitchboardIntegrationId
 */
SwitchboardIntegration.prototype['nextSwitchboardIntegrationId'] = undefined;

/**
 * Number of messages to include in the message history context.
 * @member {Number} messageHistoryCount
 */
SwitchboardIntegration.prototype['messageHistoryCount'] = undefined;
var _default = exports["default"] = SwitchboardIntegration;