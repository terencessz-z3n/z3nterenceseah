"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _ApiClient = _interopRequireDefault(require("../ApiClient"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /**
 * Sunshine Conversations API
 *
 * The version of the OpenAPI document: 12.5.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.3.1
 *
 * Do not edit the class manually.
 *
 */
/**
 * The FormMessageFieldAllOf model module.
 * @module sunshine-conversations-client/sunshine-conversations-client.model/FormMessageFieldAllOf
 * @version 12.5.0
 */
var FormMessageFieldAllOf = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>FormMessageFieldAllOf</code>.
   * Properties that can be expected to receive inside a form message field. 
   * @alias module:sunshine-conversations-client/sunshine-conversations-client.model/FormMessageFieldAllOf
   */
  function FormMessageFieldAllOf() {
    _classCallCheck(this, FormMessageFieldAllOf);
    FormMessageFieldAllOf.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  return _createClass(FormMessageFieldAllOf, [{
    key: "getPlaceholder",
    value:
    /**
         * Returns Placeholder text for the field. Form message only.
         * @return {String}
         */
    function getPlaceholder() {
      return this.placeholder;
    }

    /**
     * Sets Placeholder text for the field. Form message only.
     * @param {String} placeholder Placeholder text for the field. Form message only.
     */
  }, {
    key: "setPlaceholder",
    value: function setPlaceholder(placeholder) {
      this['placeholder'] = placeholder;
    }
    /**
         * Returns The minimum allowed length for the response for a field of type text. Form message only.
         * minimum: 1
         * maximum: 256
         * @return {Number}
         */
  }, {
    key: "getMinSize",
    value: function getMinSize() {
      return this.minSize;
    }

    /**
     * Sets The minimum allowed length for the response for a field of type text. Form message only.
     * @param {Number} minSize The minimum allowed length for the response for a field of type text. Form message only.
     */
  }, {
    key: "setMinSize",
    value: function setMinSize(minSize) {
      this['minSize'] = minSize;
    }
    /**
         * Returns The maximum allowed length for the response for a field of type text. Form message only.
         * minimum: 1
         * maximum: 256
         * @return {Number}
         */
  }, {
    key: "getMaxSize",
    value: function getMaxSize() {
      return this.maxSize;
    }

    /**
     * Sets The maximum allowed length for the response for a field of type text. Form message only.
     * @param {Number} maxSize The maximum allowed length for the response for a field of type text. Form message only.
     */
  }, {
    key: "setMaxSize",
    value: function setMaxSize(maxSize) {
      this['maxSize'] = maxSize;
    }
    /**
         * Returns Array of objects representing options for a field of type select.
         * @return {Array.<Object>}
         */
  }, {
    key: "getOptions",
    value: function getOptions() {
      return this.options;
    }

    /**
     * Sets Array of objects representing options for a field of type select.
     * @param {Array.<Object>} options Array of objects representing options for a field of type select.
     */
  }, {
    key: "setOptions",
    value: function setOptions(options) {
      this['options'] = options;
    }
  }], [{
    key: "initialize",
    value: function initialize(obj) {}

    /**
     * Constructs a <code>FormMessageFieldAllOf</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:sunshine-conversations-client/sunshine-conversations-client.model/FormMessageFieldAllOf} obj Optional instance to populate.
     * @return {module:sunshine-conversations-client/sunshine-conversations-client.model/FormMessageFieldAllOf} The populated <code>FormMessageFieldAllOf</code> instance.
     */
  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new FormMessageFieldAllOf();
        if (data.hasOwnProperty('placeholder')) {
          obj['placeholder'] = _ApiClient["default"].convertToType(data['placeholder'], 'String');
        }
        if (data.hasOwnProperty('minSize')) {
          obj['minSize'] = _ApiClient["default"].convertToType(data['minSize'], 'Number');
        }
        if (data.hasOwnProperty('maxSize')) {
          obj['maxSize'] = _ApiClient["default"].convertToType(data['maxSize'], 'Number');
        }
        if (data.hasOwnProperty('options')) {
          obj['options'] = _ApiClient["default"].convertToType(data['options'], [Object]);
        }
      }
      return obj;
    }
  }]);
}();
/**
 * Placeholder text for the field. Form message only.
 * @member {String} placeholder
 */
FormMessageFieldAllOf.prototype['placeholder'] = undefined;

/**
 * The minimum allowed length for the response for a field of type text. Form message only.
 * @member {Number} minSize
 * @default 1
 */
FormMessageFieldAllOf.prototype['minSize'] = 1;

/**
 * The maximum allowed length for the response for a field of type text. Form message only.
 * @member {Number} maxSize
 * @default 128
 */
FormMessageFieldAllOf.prototype['maxSize'] = 128;

/**
 * Array of objects representing options for a field of type select.
 * @member {Array.<Object>} options
 */
FormMessageFieldAllOf.prototype['options'] = undefined;
var _default = exports["default"] = FormMessageFieldAllOf;